package sender

import (
	"fmt"
	"log"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"poison_bot/internal/domain"
)

type Sender struct {
	log *log.Logger
	bot *tgbotapi.BotAPI
}

func NewSender(l *log.Logger, bot *tgbotapi.BotAPI) *Sender {
	return &Sender{
		log: l,
		bot: bot,
	}
}

var startKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/help"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/create_order"),
	),
)

var editKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/help"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/view_order"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/remove_item_data"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/cancel_order"),
	),
)

var addNewItemKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/help"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/view_order"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/send_order_to_manage"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/add_new_item_to_order"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("/cancel_order"),
	),
)

var itemTypeInlineKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(string(domain.ItemTypeShoes)+" üëü", string(domain.ItemTypeShoes)),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(string(domain.ItemTypeOuterwear)+" üß•", string(domain.ItemTypeOuterwear)),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(string(domain.ItemTypeCloth)+" üëï", string(domain.ItemTypeCloth)),
	),
)

func (s *Sender) SendStartMessage(chatId int64) error {
	text := `
	–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É –æ–¥–µ–∂–¥—ã –∏ –æ–±—É–≤–∏ —Å –ø–æ–π–∑–æ–Ω–∞.
	–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–æ—Ç.
	
	–ß—Ç–æ–± —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É - /create_order.

	–ß—Ç–æ–± –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∑–∞–∫–∞–∑–∞, –≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É - /view_order.

	–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.
	–ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É, –Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É - /remove_item_data
	–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.

	–ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É –∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–æ–≤–∞—Ä –µ—â—ë –æ–¥–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É - /add_new_item_to_order

	–ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É - /send_order_to_manage
	–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.

	–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /cancel_order.

	
	`
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = startKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendNotificationAboutNewOrder(chatId int64, orderID int) error {
	text := `–í–∞—à –∑–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º - ` + strconv.Itoa(orderID)
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = editKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendNotificationAboutCancelOrder(chatId int64, orderID int) error {
	text := `–í–∞—à –∑–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º - ` + strconv.Itoa(orderID) + ` –æ—Ç–º–µ–Ω—ë–Ω.`
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = startKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendRequestUrl(chatId int64) error {
	text := `
	–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä. 
	–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: https://dw4.co/t/A/1qtUwh81O
`
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = editKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendRequestPrice(chatId int64) error {
	text := `
	–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ç–æ–≤–∞—Ä –≤ CNY (¬•)? 
	–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: 186
`
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = editKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendRequestQuantity(chatId int64) error {
	text := `
	–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å? 
	–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: 2
`
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = editKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendRequestThinkType(chatId int64) error {
	text := `
	–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞.
	–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏, –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
`
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = itemTypeInlineKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendRequestShoesSize(chatId int64) error {
	text := `
	–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –æ–±—É–≤–∏? 
	–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: 39.5
`
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = editKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendRequestClosesSize(chatId int64) error {
	text := `
	–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –≤–µ—â–∏? 
	–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: M
`
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = editKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendChoiceToAddItem(chatId int64) error {
	text := `
	–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - /add_new_item_to_order
	
	–ï—Å–ª–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - /send_order_to_manage
`
	msg := tgbotapi.NewMessage(chatId, text)

	msg.ReplyMarkup = addNewItemKeyboard

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendUnknownMessage(chatId int64) error {
	text := `
	–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
	–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—Å—ë —Å–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel_order
`
	msg := tgbotapi.NewMessage(chatId, text)

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendUserOrderReport(chatId int64, order domain.Order, totalPrice float64) error {
	itemsText := ""
	for _, item := range order.Items {
		itemsText += getItemText(item)
	}

	orderText := fmt.Sprintf(
		`
User: @%s
Total price:	%.2f RUB (‚ÇΩ)
Items:
%s
`,
		order.UserName,
		totalPrice,
		itemsText,
	)

	msg := tgbotapi.NewMessage(chatId, orderText)
	msg.DisableWebPagePreview = true

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendCallback(callbackID, data string) error {
	callback := tgbotapi.NewCallback(callbackID, data)
	if _, err := s.bot.Request(callback); err != nil {
		s.log.Printf("Error sending Callback Request: %v", err)
		return err
	}
	return nil
}

func (s *Sender) SendAdminOrderReport(chatId int64, order domain.Order, exchangeRate float64, totalPrice float64) error {
	itemsText := ""
	for _, item := range order.Items {
		itemsText += getItemText(item)
	}

	orderText := fmt.Sprintf(
		`
User: @%s
Exchange rate:	%.2f RUB (‚ÇΩ) = 1 CNY (¬•)
Total price:	%.2f RUB (‚ÇΩ)
Items:
%s
`,
		order.UserName,
		exchangeRate,
		totalPrice,
		itemsText,
	)

	msg := tgbotapi.NewMessage(chatId, orderText)
	msg.DisableWebPagePreview = true

	_, err := s.bot.Send(msg)
	if err != nil {
		s.log.Printf("Error sending start message: %v", err)
		return err
	}
	return nil
}

func getItemText(item domain.BasketItem) string {
	return fmt.Sprintf(
		`

-----------------------------
Item ‚Ññ %d
Link: %s
Type: %s
Size: %s
Price: %d CNY (¬•)
Quantity: %d
-----------------------------

				`,
		item.ID,
		item.Url,
		item.Type,
		item.Size,
		item.Price,
		item.Quantity,
	)
}
